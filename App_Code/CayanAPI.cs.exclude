using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Text.RegularExpressions;
using MerchantWare;
/// <summary>
/// Summary description for CayanAPI
/// </summary>
public class CayanAPI
{
    public CayanAPI()
    {
        System.Net.ServicePointManager.SecurityProtocol = System.Net.SecurityProtocolType.Tls12;
        merchantName = System.Configuration.ConfigurationManager.AppSettings["MerchantName"];
        merchantSiteId = System.Configuration.ConfigurationManager.AppSettings["MerchantSiteId"];
        merchantKey = System.Configuration.ConfigurationManager.AppSettings["MerchantKey"];

    }

    public CayanAPI(string MerchantName, string MerchantSiteId, string MerchantKey)
    {
        System.Net.ServicePointManager.SecurityProtocol = System.Net.SecurityProtocolType.Tls12;
        merchantName = MerchantName;
        merchantSiteId = MerchantSiteId;
        merchantKey = MerchantKey;
    }

    private string merchantName = "";
    private string merchantSiteId = "";
    private string merchantKey = "";


    //Set Card Type
    public enum CardType
    {

        //American Express, Discover, JCB, MasterCard, Visa
        Unknown = 0,
        MasterCard = 1,
        VISA = 2,
        Amex = 3,
        Discover = 4,
        DinersClub = 5,
        JCB = 6,
        EnRoute = 7
    }
    // Class to hold credit card type information
    private class CardTypeInfo
    {
        public CardTypeInfo(string regEx, int length, CardType type)
        {
            RegEx = regEx;
            Length = length;
            Type = type;
        }

        public string RegEx { get; set; }
        public int Length { get; set; }
        public CardType Type { get; set; }
    }

    private static CardTypeInfo[] _cardTypeInfo =
    {
      new CardTypeInfo("^(51|52|53|54|55)", 16, CardType.MasterCard),
      new CardTypeInfo("^(4)", 16, CardType.VISA),
      new CardTypeInfo("^(4)", 13, CardType.VISA),
      new CardTypeInfo("^(34|37)", 15, CardType.Amex),
      new CardTypeInfo("^(6011)", 16, CardType.Discover),
      new CardTypeInfo("^(300|301|302|303|304|305|36|38)", 
                       14, CardType.DinersClub),
      new CardTypeInfo("^(3)", 16, CardType.JCB),
      new CardTypeInfo("^(2131|1800)", 15, CardType.JCB),
      new CardTypeInfo("^(2014|2149)", 15, CardType.EnRoute),
    };

    public CardType GetCardType(string cardNumber)
    {
        foreach (CardTypeInfo info in _cardTypeInfo)
        {
            if (cardNumber.Length == info.Length &&
                Regex.IsMatch(cardNumber, info.RegEx))
                return info.Type;
        }

        return CardType.Unknown;


    }

    public List<string> ChargePaymentProfile(string Token, decimal Amount)
    {


        List<string> sArray = new List<string>();

        try
        {
            using (var service = new CreditSoapClient("CreditSoap"))
            {

                MerchantCredentials credentials = new MerchantCredentials
                {
                    MerchantName = merchantName,
                    MerchantSiteId = merchantSiteId,
                    MerchantKey = merchantKey
                };

                PaymentData paymentData = new PaymentData
                {
                    VaultToken = Token,
                    Source = "Vault"

                };



                SaleRequest saleRequest = new SaleRequest
                {

                    Amount = Amount.ToString(),
                    RegisterNumber = "123",
                    MerchantTransactionId = "1234",
                    CardAcceptorTerminalId = "01"
                };

                var response = service.Sale(credentials, paymentData, saleRequest);
                //TransactionResponse45 response = new TransactionResponse45();
                //response.ApprovalStatus = "DECLINED;1023;invalid account num";
                //response.ErrorMessage = "";
                //response.AuthorizationCode = "Invalid_Account_Number";

                var error = response.ErrorMessage;

                if (error != "")
                {
                    throw new Exception(error);
                }
                else
                {
                    if (response.ApprovalStatus.ToUpper().Contains("APPROVED"))
                    {
                        sArray.Add(response.AuthorizationCode);
                        sArray.Add(response.Token);
                        sArray.Add(response.ApprovalStatus);
                    }
                    else
                    {
                        throw new Exception(response.ApprovalStatus);

                    }


                }

            }




        }
        catch (Exception ex)
        {
            throw ex;


        }

        return sArray;

    }


    public List<string> RepeatSale(decimal Amount, string Token)
    {


        List<string> sArray = new List<string>();

        try
        {
            using (var service = new CreditSoapClient("CreditSoap"))
            {

                MerchantCredentials credentials = new MerchantCredentials
                {
                    MerchantName = merchantName,
                    MerchantSiteId = merchantSiteId,
                    MerchantKey = merchantKey
                };

                PaymentData paymentData = new PaymentData
                {
                    VaultToken = Token,
                    Source = "PreviousTransaction"


                };



                SaleRequest saleRequest = new SaleRequest
              {

                  Amount = Amount.ToString(),
                  RegisterNumber = "123",
                  MerchantTransactionId = "1234",
                  CardAcceptorTerminalId = "01"
              };

                var response = service.Sale(credentials, paymentData, saleRequest);

                var error = response.ErrorMessage;

                if (error != "")
                {
                    throw new Exception(error);
                }
                else
                {

                    if (response.ApprovalStatus.ToUpper().Contains("APPROVED"))
                    {
                        sArray.Add(response.AuthorizationCode);
                        sArray.Add(response.Token);
                        sArray.Add(response.ApprovalStatus);
                    }
                    else
                    {
                        throw new Exception(response.ApprovalStatus);

                    }



                }

            }




        }
        catch (Exception ex)
        {
            throw ex;

        }

        return sArray;

    }

    public List<string> ChargeCreditCard_Key(string CardNumber, string ExpirationDate, string CardCode, decimal Amount, string Name, string Email, string Address, string City, string State, string Zip, string InvoiceNo, string PurchaseOrderNo)
    {


        List<string> sArray = new List<string>();

        try
        {
            using (var service = new CreditSoapClient("CreditSoap"))
            {

                MerchantCredentials credentials = new MerchantCredentials
                {
                    MerchantName = merchantName,
                    MerchantSiteId = merchantSiteId,
                    MerchantKey = merchantKey
                };

                PaymentData paymentData = new PaymentData
                {
                    Source = "Keyed",
                    CardNumber = CardNumber,
                    ExpirationDate = ExpirationDate,
                    CardVerificationValue = CardCode,
                    CardHolder = Name,
                    AvsStreetAddress = Address,
                    AvsZipCode = Zip
                };



                SaleRequest saleRequest = new SaleRequest
                {

                    Amount = Amount.ToString(),
                    RegisterNumber = "123",
                    MerchantTransactionId = "1234",
                    CardAcceptorTerminalId = "01",
                    InvoiceNumber = InvoiceNo
                    //PurchaseOrderNumber = PurchaseOrderNo
                };

                var response = service.Sale(credentials, paymentData, saleRequest);

                var error = response.ErrorMessage;

                if (error != "")
                {
                    throw new Exception(error);
                }
                else
                {

                    if (response.ApprovalStatus.ToUpper().Contains("APPROVED"))
                    {
                        sArray.Add(response.AuthorizationCode);
                        sArray.Add(response.Token);
                        sArray.Add(response.ApprovalStatus);
                    }
                    else
                    {
                        throw new Exception(response.ApprovalStatus);

                    }

                }

            }




        }
        catch (Exception ex)
        {
            throw ex;


        }

        return sArray;

    }


    public string CreatePaymentProfile(string CardNumber, string ExpirationDate, string CardCode, string Name, string Email, string Address, string City, string State, string Zip)
    {


        string sToken = "";

        try
        {
            using (var service = new CreditSoapClient("CreditSoap"))
            {

                MerchantCredentials credentials = new MerchantCredentials
                {
                    MerchantName = merchantName,
                    MerchantSiteId = merchantSiteId,
                    MerchantKey = merchantKey
                };

                PaymentData paymentData = new PaymentData
                {

                    Source = "Keyed",
                    CardNumber = CardNumber,
                    ExpirationDate = ExpirationDate,
                    CardVerificationValue = CardCode,
                    CardHolder = Name,
                    AvsStreetAddress = Address,
                    AvsZipCode = Zip
                };

                BoardingRequest boardRequest = new BoardingRequest
                {

                };


                var response = service.BoardCard(credentials, paymentData, boardRequest);

                var error = response.ErrorMessage;

                if (error != "")
                {
                    throw new Exception("Code: " + response.ErrorCode + "<br/>" + "Message:" + error);

                }
                else
                {

                    sToken = response.VaultToken;

                }

            }




        }
        catch (Exception ex)
        {
            throw ex;

        }

        return sToken;

    }

    public bool UpdatePaymentProfile(string Token, string ExpirationDate)
    {


        try
        {
            using (var service = new CreditSoapClient("CreditSoap"))
            {

                MerchantCredentials credentials = new MerchantCredentials
                {
                    MerchantName = merchantName,
                    MerchantSiteId = merchantSiteId,
                    MerchantKey = merchantKey
                };


                UpdateBoardedCardRequest boardRequest = new UpdateBoardedCardRequest
                {
                    VaultToken = Token,
                    ExpirationDate = ExpirationDate

                };


                var response = service.UpdateBoardedCard(credentials, boardRequest);

                var error = response.ErrorMessage;

                if (error != "")
                {
                    throw new Exception("Code: " + response.ErrorCode + "<br/>" + "Message:" + error);

                }
                else
                {

                    if (Token == response.VaultToken)
                        return true;

                }

            }




        }
        catch (Exception ex)
        {
            throw ex;


        }

        return false;

    }

    public bool DeletePaymentProfile(string Token)
    {


        try
        {
            using (var service = new CreditSoapClient("CreditSoap"))
            {

                MerchantCredentials credentials = new MerchantCredentials
                {
                    MerchantName = merchantName,
                    MerchantSiteId = merchantSiteId,
                    MerchantKey = merchantKey
                };

                VaultTokenRequest req = new VaultTokenRequest
                {

                    VaultToken = Token
                };


                var response = service.UnboardCard(credentials, req);

                var error = response.ErrorMessage;

                if (error != "")
                {
                    throw new Exception("Code: " + response.ErrorCode + "<br/>" + "Message:" + error);

                }
                else
                {


                    if (Token == response.VaultToken)
                        return true;

                }

            }




        }
        catch (Exception ex)
        {
            throw ex;


        }

        return false;

    }

    public List<string> GetPaymentProfileInfo(string Token)
    {


        List<string> sArray = new List<string>();

        try
        {
            using (var service = new CreditSoapClient("CreditSoap"))
            {

                MerchantCredentials credentials = new MerchantCredentials
                {
                    MerchantName = merchantName,
                    MerchantSiteId = merchantSiteId,
                    MerchantKey = merchantKey
                };

                VaultTokenRequest req = new VaultTokenRequest
                {

                    VaultToken = Token
                };


                var response = service.FindBoardedCard(credentials, req);

                var error = response.ErrorMessage;

                if (error != "")
                {
                    throw new Exception("Code: " + response.ErrorCode + "<br/>" + "Message:" + error);

                }
                else
                {

                    sArray.Add(response.Cardholder);
                    sArray.Add(response.AvsStreetAddress);
                    sArray.Add(response.AvsZipCode);
                    sArray.Add(response.CardType);
                    sArray.Add(response.CardNumber);
                    sArray.Add(response.ExpirationDate);


                }

            }




        }
        catch (Exception ex)
        {
            throw ex;


        }

        return sArray;

    }



    public List<string> Pre_Authorization_Key(string CardNumber, string ExpirationDate, string CardCode, decimal Amount, string Name, string Email, string Address, string City, string State, string Zip, string InvoiceNo)
    {


        List<string> sArray = new List<string>();

        try
        {
            using (var service = new CreditSoapClient("CreditSoap"))
            {

                MerchantCredentials credentials = new MerchantCredentials
                {
                    MerchantName = merchantName,
                    MerchantSiteId = merchantSiteId,
                    MerchantKey = merchantKey
                };


                PaymentData paymentData = new PaymentData
               {
                   Source = "Keyed",
                   CardNumber = CardNumber,
                   ExpirationDate = ExpirationDate,
                   CardVerificationValue = CardCode,
                   CardHolder = Name,
                   AvsStreetAddress = Address,
                   AvsZipCode = Zip
               };


                AuthorizationRequest authorizRequest = new AuthorizationRequest
                {
                    Amount = Amount.ToString(),
                    RegisterNumber = "123",
                    MerchantTransactionId = "1234",
                    CardAcceptorTerminalId = "01",
                    InvoiceNumber = InvoiceNo
                };

                var response = service.Authorize(credentials, paymentData, authorizRequest);

                var error = response.ErrorMessage;

                if (error != "")
                {
                    throw new Exception(error);
                }
                else
                {

                    if (response.ApprovalStatus.ToUpper().Contains("APPROVED"))
                    {
                        sArray.Add(response.AuthorizationCode);
                        sArray.Add(response.Token);
                        sArray.Add(response.ApprovalStatus);
                    }
                    else
                    {
                        throw new Exception(response.ApprovalStatus);

                    }

                }

            }




        }
        catch (Exception ex)
        {
            throw ex;
        }

        return sArray;

    }

    public List<string> Pre_Authorization_Vault(decimal Amount, string Token)
    {


        List<string> sArray = new List<string>();

        try
        {
            using (var service = new CreditSoapClient("CreditSoap"))
            {

                MerchantCredentials credentials = new MerchantCredentials
                {
                    MerchantName = merchantName,
                    MerchantSiteId = merchantSiteId,
                    MerchantKey = merchantKey
                };

                PaymentData paymentData = new PaymentData
                {
                    VaultToken = Token,
                    Source = "Vault"


                };



                AuthorizationRequest authoRequest = new AuthorizationRequest
                {

                    Amount = Amount.ToString(),
                    RegisterNumber = "123",
                    MerchantTransactionId = "1234",
                    CardAcceptorTerminalId = "01"
                };

                var response = service.Authorize(credentials, paymentData, authoRequest);

                var error = response.ErrorMessage;

                if (error != "")
                {
                    throw new Exception(error);
                }
                else
                {

                    if (response.ApprovalStatus.ToUpper().Contains("APPROVED"))
                    {
                        sArray.Add(response.AuthorizationCode);
                        sArray.Add(response.Token);
                        sArray.Add(response.ApprovalStatus);
                    }
                    else
                    {
                        throw new Exception(response.ApprovalStatus);

                    }



                }

            }




        }
        catch (Exception ex)
        {
            throw ex;


        }

        return sArray;

    }

    public List<string> Capture(string sToken, decimal Amount)
    {


        List<string> sArray = new List<string>();

        try
        {
            using (var service = new CreditSoapClient("CreditSoap"))
            {

                MerchantCredentials credentials = new MerchantCredentials
                {
                    MerchantName = merchantName,
                    MerchantSiteId = merchantSiteId,
                    MerchantKey = merchantKey
                };



                CaptureRequest captureRequest = new CaptureRequest
                {
                    Token = sToken,
                    Amount = Amount.ToString(),
                    RegisterNumber = "123",
                    MerchantTransactionId = "1234",
                    CardAcceptorTerminalId = "01"
                };

                var response = service.Capture(credentials, captureRequest);

                var error = response.ErrorMessage;

                if (error != "")
                {
                    throw new Exception(error);
                }
                else
                {

                    if (response.ApprovalStatus.ToUpper().Contains("APPROVED"))
                    {
                        sArray.Add(response.AuthorizationCode);
                        sArray.Add(response.Token);
                        sArray.Add(response.ApprovalStatus);
                    }
                    else
                    {
                        throw new Exception(response.ApprovalStatus);

                    }

                }

            }




        }
        catch (Exception ex)
        {
            throw ex;
        }

        return sArray;

    }



    public List<string> VoidSale(string TokenNo)
    {


        List<string> sArray = new List<string>();

        try
        {
            using (var service = new CreditSoapClient("CreditSoap"))
            {

                MerchantCredentials credentials = new MerchantCredentials
                {
                    MerchantName = merchantName,
                    MerchantSiteId = merchantSiteId,
                    MerchantKey = merchantKey
                };


                VoidRequest voidRequest = new VoidRequest
                {
                    Token = TokenNo,
                    RegisterNumber = "123",
                    MerchantTransactionId = "1234",
                    CardAcceptorTerminalId = "01"
                };

                var response = service.Void(credentials, voidRequest);

                var error = response.ErrorMessage;

                if (error != "")
                {
                    throw new Exception(error);
                }
                else
                {

                    if (response.ApprovalStatus.ToUpper().Contains("APPROVED"))
                    {
                        sArray.Add(response.AuthorizationCode);
                        sArray.Add(response.Token);
                        sArray.Add(response.ApprovalStatus);
                    }
                    else
                    {
                        throw new Exception(response.ApprovalStatus);

                    }



                }

            }




        }
        catch (Exception ex)
        {
            throw ex;


        }

        return sArray;

    }


    public List<string> Refund(string sToken, decimal Amount)
    {


        List<string> sArray = new List<string>();

        try
        {
            using (var service = new CreditSoapClient("CreditSoap"))
            {

                MerchantCredentials credentials = new MerchantCredentials
                {
                    MerchantName = merchantName,
                    MerchantSiteId = merchantSiteId,
                    MerchantKey = merchantKey
                };

                PaymentData payment = new PaymentData
                {
                    Token = sToken,
                    Source = "PreviousTransaction"

                };

                RefundRequest refRequest = new RefundRequest
                {

                    Amount = Amount.ToString(),
                    RegisterNumber = "123",
                    MerchantTransactionId = "1234",
                    CardAcceptorTerminalId = "01"
                };

                var response = service.Refund(credentials, payment, refRequest);

                var error = response.ErrorMessage;

                if (error != "")
                {
                    throw new Exception(error);
                }
                else
                {

                    sArray.Add(response.AuthorizationCode);
                    sArray.Add(response.Token);
                    sArray.Add(response.ApprovalStatus);

                }

            }




        }
        catch (Exception ex)
        {
            throw ex;
        }

        return sArray;

    }


    public string ChargeECheck(string AccountNumber, string RoutingNumber, string NameOnAccount, string BankName, decimal Amount)
    {
        string sReturn = "";

        /*        try
                {
                    if (Convert.ToBoolean(System.Configuration.ConfigurationManager.AppSettings["UseCreditCard"]))
                        ApiOperationBase<ANetApiRequest, ANetApiResponse>.RunEnvironment = AuthorizeNet.Environment.PRODUCTION;
                    else
                        ApiOperationBase<ANetApiRequest, ANetApiResponse>.RunEnvironment = AuthorizeNet.Environment.SANDBOX;


                    // define the merchant information (authentication / transaction id)
                    ApiOperationBase<ANetApiRequest, ANetApiResponse>.MerchantAuthentication = new merchantAuthenticationType()
                    {
                        name = apiLoginID,
                        ItemElementName = ItemChoiceType.transactionKey,
                        Item = apiTransactionKey,
                    };


                    var bankAccount = new bankAccountType
                    {
                        accountNumber = AccountNumber,
                        routingNumber = RoutingNumber,
                        accountType = bankAccountTypeEnum.checking,
                        echeckType = echeckTypeEnum.WEB,
                        nameOnAccount = NameOnAccount,
                        bankName = BankName
                    };

                    paymentType echeck = new paymentType { Item = bankAccount };

                    var transactionRequest = new transactionRequestType
                    {
                        transactionType = transactionTypeEnum.authCaptureTransaction.ToString(),    // charge the card
                        amount = Amount,
                        payment = echeck
                    };




                    var request = new createTransactionRequest { transactionRequest = transactionRequest };

                    // instantiate the contoller that will call the service
                    var controller = new createTransactionController(request);
                    controller.Execute();

                    // get the response from the service (errors contained if any)
                    var response = controller.GetApiResponse();
                    if (response == null)
                    {
                        throw new Exception("Bank or Account information is invalid");
                    }

                    if (response.messages.resultCode == messageTypeEnum.Ok)
                    {
                        if (response.transactionResponse != null)
                        {

                            if (response.transactionResponse.messages != null)
                            {
                                if (response.transactionResponse.messages[0].code.ToString() == "1")
                                {
                                    sReturn = response.transactionResponse.transId;
                                }
                                else
                                {
                                    throw new Exception(response.transactionResponse.messages[0].description);

                                }
                            }
                            else if (response.transactionResponse.errors != null)
                            {
                                throw new Exception(response.transactionResponse.errors[0].errorText);

                            }
                        }
                    }
                    else
                    {
                        if (response.transactionResponse.errors != null)
                            throw new Exception(response.transactionResponse.errors[0].errorText);
                    }

                }
                catch (Exception ex)
                {
                    throw ex;
                }
         */
        return sReturn;

    }


}

